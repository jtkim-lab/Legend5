/*
   These are Block Project Codes
 ***********************************************************************
		 Raspberry Pi - AVR#1 - AVR#2 - ... - AVR#n
 ***********************************************************************
 - init.c
 : This file includes main() function.

 - lcd_22.h, lcd_22.c
 : LCD API

 - parse.c
 : link grammer
 ***********************************************************************
 */

#include <stdio.h>
#include <string.h>
#include <errno.h>

#include <wiringPi.h>
#include <wiringSerial.h>

#include "lcd_22.h"

char ID_arrayc[32] = {1,8,9,10,6,}; //samle ID array "I love a pretty girl"
int block_cnt=5;

int main (char argc, char * argv[])
{
	int testflag=0;

	// R-Pi Serial
	int fd ;
	char last_check = '!' ;
	char ack = '@' ;
	char start_bit = '^' ;
	char stop_bit = '*' ;
	char temp ;

	int i = 0 ;
	int count = 0 ;// id_array length
	unsigned int nextTime ;

	if ((fd = serialOpen ("/dev/ttyAMA0", 9600)) < 0)
	{
		fprintf (stderr, "Unable to open serial device: %s\n", strerror (errno)) ;
		return 1 ;
	}

	if (wiringPiSetup () == -1)
	{
		fprintf (stdout, "Unable to start wiringPi: %s\n", strerror (errno)) ;
		return 1 ;
	}

	// INITIALIZE
	load_lg();//Load link grammer

	init_lcd(); //Initialize LCD
	image_display(0); //Display waiting mode LCD
	serialPutchar(fd,'!');
	// RUNNING
	while(1){

		temp = serialGetchar(fd);
		printf("%c, ", temp);
		fflush(stdout);
		serialPutchar(fd, temp);


	//	count = 0 ;
/*
		//Touch Sensing
//			printf("start1!\n") ;
		read_res=Read_Continue();
//			printf("start2!\n") ;
		if(!(touch_dot.x==0&&touch_dot.y==0)){
			//touch event activated!
			
			printf("start!\n") ;
			// 1. SEND LAST CHECK BIT
			fflush (stdout) ;
			serialPutchar ( fd, last_check ) ;
			printf("I sent last check bit\n");
		
			// 2. ACK


			while(serialGetchar (fd) != ack)
			{
			
				printf("Here is ACK waiting loop \n") ;
				fflush (stdout) ;
					
			}
			// 3. WAIT
			printf("*********WAIT*********\n");
			
			temp = serialGetchar (fd) ;
			//finding start bit
			while( temp != start_bit )
			{
				temp = serialGetchar (fd) ;
			}
		
			//finding stop bit and save id into id arr[]
			while( temp != stop_bit )
			{
				if(serialDataAvail (fd))
				{
					ID_arrayc[count] = serialGetchar (fd) - 0x30;
					temp = ID_arrayc[count] + 0x30 ;
					count++ ;
					printf("I got this ID : %d, and my count is %d \n", temp, count) ;	
					fflush(stdout) ;
                                }
			}
			printf("********I got stop bit***********\n") ;
		
			// 4. RECEIVE -> BT
			printf("It`s time to send id_arr to android by BT\n") ;
			for( i = 0 ; i < count-1 ; i++)
			{
				fflush(stdout) ;
				serialPutchar (fd, ID_arrayc[i]);
			}

			printf("BT sending is done\n") ;

			//<---------JUST FOR THE TEST. NEED TO BE CHANGED-------->
			//<---------JUST FOR THE TEST. NEED TO BE CHANGED-------->

			//1. make sentence by using ID array

			//2. sentence processing
			sentence_processing(ID_arrayc,count-1);
			
			printf("finish\n");
			
		}

		touch_dot.x=0;
		touch_dot.y=0;
		*/
	}

	// TERMINATING
	unload_lg();//Unload link grammer

	return 0 ;
}
